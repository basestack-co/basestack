// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins", "nativeDistinct", "driverAdapters"]
}

enum Role {
  USER
  ADMIN // Full access to create, modify, delete, and view all feature flags, environments, and settings
  DEVELOPER // Can create and modify feature flags, but might have limitations on the settings
  VIEWER // Read-only access to see feature flags and their states but cannot modify them
  TESTER // Can toggle flags only
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId, token])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified Boolean?          @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      ProjectsOnUsers[]
  teams         TeamMembers[]
  usage         Usage[]
  role          Role              @default(ADMIN)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([email, name])
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier])
}

model Usage {
  id           String   @id @default(cuid())
  userId       String   @unique
  projects     Int      @default(0)
  environments Int      @default(0)
  flags        Int      @default(0)
  segments     Int      @default(0)
  rollouts     Int      @default(0)
  members      Int      @default(0)
  teams        Int      @default(0)
  apiRequests  Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id               String        @id @default(cuid())
  name             String        @db.VarChar(30)
  slug             String        @unique @db.VarChar(150)
  key              String?       @unique @default(cuid())
  environments     Environment[]
  blockIpAddresses String?
  websites         String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  users   ProjectsOnUsers[]
  history History[]

  @@index([key, slug])
}

model ProjectsOnUsers {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([projectId, userId])
}

model Environment {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(30)
  description String?  @db.VarChar(250)
  slug        String   @unique @db.VarChar(150)
  key         String?  @unique @default(cuid())
  isDefault   Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  flags       Flag[]

  @@index([key, slug])
}

model Flag {
  id            String      @id @default(cuid())
  slug          String      @db.VarChar(150)
  description   String?     @db.VarChar(250)
  enabled       Boolean     @default(false)
  payload       Json?       @default("{}") @db.Json
  expiredAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String

  @@index([slug, environmentId])
}

model History {
  id        String   @default(cuid())
  projectId String
  action    String
  payload   Json?    @default("{}") @db.Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([id, projectId])
}

model Team {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(250)
  slug        String   @unique @db.VarChar(150)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     TeamMembers[]
  invitations TeamInvitation[]

  @@index([slug])
}

model TeamMembers {
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([teamId, userId])
}

model TeamInvitation {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  role      Role     @default(VIEWER)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, teamId])
}
