// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins", "nativeDistinct"]
  output          = "../node_modules/.prisma/client"
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  gh_username   String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  projects      ProjectsOnUsers[]
  subscription  Subscription?
  role          Role              @default(ADMIN)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  @@index([email, name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String    @unique
  subscriptionId    String
  customerId        Int?
  productId         Int?
  variantId         Int?
  status            String?
  scheduleId        String?   @unique
  planId            String
  event             String?
  billingCycleStart DateTime
  paused            Boolean?  @default(false)
  cancelled         Boolean?  @default(false)
  projects          Int       @default(0)
  environments      Int       @default(0)
  flags             Int       @default(0)
  segments          Int       @default(0)
  rollouts          Int       @default(0)
  members           Int       @default(0)
  apiRequests       Int       @default(0)
  renewsAt          DateTime?
  endsAt            DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, subscriptionId])
}

model Project {
  id               String        @id @default(cuid())
  name             String        @db.VarChar(30)
  slug             String        @unique @db.VarChar(150)
  key              String?       @unique @default(cuid())
  environments     Environment[]
  blockIpAddresses String?
  websites         String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  users   ProjectsOnUsers[]
  history History[]

  @@index([key, slug])
}

model ProjectsOnUsers {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([projectId, userId])
}

model Environment {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(30)
  description String?  @db.VarChar(250)
  slug        String   @unique @db.VarChar(150)
  key         String?  @unique @default(cuid())
  isDefault   Boolean? @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  flags       Flag[]

  @@index([key, slug])
}

model Flag {
  id            String      @id @default(cuid())
  slug          String      @db.VarChar(150)
  description   String?     @db.VarChar(250)
  enabled       Boolean     @default(false)
  payload       Json?       @default("{}") @db.Json
  expiredAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String

  @@index([slug, environmentId])
}

model History {
  id        String   @default(cuid())
  projectId String
  action    String
  payload   Json?    @default("{}") @db.Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([id, projectId])
}
