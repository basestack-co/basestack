// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins", "nativeDistinct"]
  output          = "../node_modules/.prisma/client"
}

enum Role {
  USER
  ADMIN // Full access to create, modify, delete, and view all forms and settings
  DEVELOPER // Can create and modify forms, but might have limitations on the settings
  VIEWER // Read-only access to see forms and their states but cannot modify them
  TESTER // Can view forms and their states but cannot modify them
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId, token])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified Boolean?      @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  teams         TeamMembers[]
  usage         Usage[]
  role          Role          @default(ADMIN)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([email, name])
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier])
}

model Usage {
  id        String   @id @default(cuid())
  userId    String   @unique
  teams     Int      @default(0)
  members   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(250)
  slug        String   @unique @db.VarChar(150)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     TeamMembers[]
  invitations TeamInvitation[]

  @@index([slug])
}

model TeamMembers {
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([teamId, userId])
}

model TeamInvitation {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  role      Role     @default(VIEWER)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, teamId])
}
