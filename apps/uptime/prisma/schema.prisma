// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "relationJoins", "nativeDistinct"]
  output          = "../node_modules/.prisma/client"
}

enum Role {
  ADMIN // Full access to create, modify, delete monitors and status pages
  DEVELOPER // Can create and modify monitors, limited settings access
  VIEWER // Read-only access to monitors and status pages
  OPERATOR // Can acknowledge incidents and update status
}

enum MonitorType {
  HTTP
  HTTPS
  PING
  TCP
  UDP
  SSL_CERTIFICATE
  DOMAIN_EXPIRY
  CRON_JOB
  API_ENDPOINT
  KEYWORD
}

enum MonitorStatus {
  UP
  DOWN
  DEGRADED
  MAINTENANCE
  UNKNOWN
  TIMEOUT
  ERROR
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum IncidentSeverity {
  MINOR
  MAJOR
  CRITICAL
}

enum NotificationChannel {
  EMAIL
  SMS
  SLACK
  DISCORD
  WEBHOOK
  TEAMS
  PHONE_CALL
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId, token])
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   Boolean?         @default(false)
  image           String?
  accounts        Account[]
  sessions        Session[]
  teams           TeamMembers[]
  projects        ProjectUsers[]
  incidents       Incident[]
  incidentUpdates IncidentUpdate[]
  role            Role             @default(ADMIN)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([email, name])
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@index([identifier])
}

model Team {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(50)
  description String?  @db.VarChar(250)
  slug        String   @unique @db.VarChar(150)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     TeamMembers[]
  invitations TeamInvitation[]

  @@index([slug])
}

model TeamMembers {
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([teamId, userId])
}

model TeamInvitation {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  role      Role     @default(VIEWER)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, teamId])
}

model Project {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(150)
  description String?  @db.VarChar(500)
  timezone    String   @default("UTC")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       ProjectUsers[]
  monitors    Monitor[]
  statusPages StatusPage[]
  incidents   Incident[]

  @@index([slug])
}

model ProjectUsers {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([projectId, userId])
  @@index([userId])
}

model Monitor {
  id            String      @id @default(cuid())
  name          String      @db.VarChar(100)
  type          MonitorType
  config        Json        @default("{}") @db.JsonB
  notifications Json?       @default("{}") @db.JsonB // Structure: { "email": [...], "slack": [...], "webhooks": [...] }
  interval      Int         @default(300)
  isEnabled     Boolean     @default(true)
  scheduleId    String?     @unique
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  checks     MonitorCheck[]
  incidents  IncidentMonitor[]
  components StatusPageComponent[]

  @@index([projectId, isEnabled])
  @@index([type, isEnabled])
  @@index([projectId, type, isEnabled])
}

model MonitorCheck {
  id           String        @id @default(cuid())
  monitorId    String
  status       MonitorStatus
  responseTime Int?
  responseSize Int?
  statusCode   Int?
  error        String?
  region       String        @default("")
  checkedAt    DateTime      @default(now())

  monitor Monitor @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId, checkedAt(sort: Desc)])
  @@index([checkedAt(sort: Desc)])
  @@index([monitorId, status, checkedAt(sort: Desc)])
}

model StatusPage {
  id            String   @id @default(cuid())
  name          String   @db.VarChar(100)
  slug          String   @unique @db.VarChar(100)
  domain        String?  @unique @db.VarChar(255)
  language      String   @default("en") @db.VarChar(5)
  isPublic      Boolean  @default(true)
  isEnabled     Boolean  @default(true)
  logoUrl       String?  @db.VarChar(2083)
  favicon       String?  @db.VarChar(2083)
  customCSS     String?  @db.Text
  customJS      String?  @db.Text
  theme         Json?    @default("{}") @db.JsonB
  timezone      String   @default("UTC")
  headerMessage String?  @db.Text
  footerMessage String?  @db.Text
  twitterHandle String?  @db.VarChar(50)
  supportUrl    String?  @db.VarChar(2083)
  projectId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  components  StatusPageComponent[]
  subscribers StatusPageSubscriber[]
  incidents   StatusPageIncident[]

  @@index([slug, isPublic])
  @@index([projectId])
}

model StatusPageComponent {
  id          String        @id @default(cuid())
  name        String        @db.VarChar(100)
  description String?       @db.VarChar(500)
  status      MonitorStatus @default(UP)
  order       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  statusPage   StatusPage @relation(fields: [statusPageId], references: [id], onDelete: Cascade)
  statusPageId String
  monitor      Monitor?   @relation(fields: [monitorId], references: [id])
  monitorId    String?

  @@index([statusPageId, order])
}

model Incident {
  id             String           @id @default(cuid())
  title          String           @db.VarChar(200)
  description    String?          @db.Text
  status         IncidentStatus   @default(INVESTIGATING)
  severity       IncidentSeverity @default(MINOR)
  isScheduled    Boolean          @default(false)
  scheduledStart DateTime?
  scheduledEnd   DateTime?
  resolvedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  project     Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdBy   User?                @relation(fields: [createdById], references: [id])
  createdById String?
  updates     IncidentUpdate[]
  monitors    IncidentMonitor[]
  statusPages StatusPageIncident[]

  @@index([projectId, status])
  @@index([createdAt])
}

model IncidentUpdate {
  id        String         @id @default(cuid())
  message   String         @db.Text
  status    IncidentStatus
  createdAt DateTime       @default(now())

  incident    Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId  String
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String?

  @@index([incidentId, createdAt])
  @@index([createdAt(sort: Desc)])
}

model IncidentMonitor {
  incident   Incident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId String
  monitor    Monitor  @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  monitorId  String

  @@id([incidentId, monitorId])
}

model StatusPageIncident {
  statusPage   StatusPage @relation(fields: [statusPageId], references: [id], onDelete: Cascade)
  statusPageId String
  incident     Incident   @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  incidentId   String

  @@id([statusPageId, incidentId])
}

model StatusPageSubscriber {
  id          String                @id @default(cuid())
  email       String?               @db.VarChar(255)
  phone       String?               @db.VarChar(20)
  channels    NotificationChannel[]
  components  String[]              @default([])
  isVerified  Boolean               @default(false)
  verifyToken String?               @unique
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  statusPage   StatusPage @relation(fields: [statusPageId], references: [id], onDelete: Cascade)
  statusPageId String

  @@index([statusPageId, isVerified])
  @@index([email])
}
